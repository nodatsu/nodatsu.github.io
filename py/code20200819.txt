サンプルと演習問題(解答例)のコード(1日目)

----------------------------------------------------------------------------------------
8. オブジェクト
----------------------------------------------------------------------------------------

8.1 クラス定義とインスタンス生成、メソッド呼び出し

class Player:
    def __init__(self):
        self.name = "プレイヤー"
    
    def walk(self):
        print(self.name + "は歩いている")

    def rest(self):
        print(self.name + "は休んでいる")

p1 = Player()

p1.walk()
p1.rest()


8.2 メソッドに引数を渡す

class Player:
    def __init__(self, n):
        self.name = n
    
    def walk(self):
        print(self.name + "は歩いている")

    def rest(self):
        print(self.name + "は休んでいる")

p1 = Player("太郎")
p2 = Player("次郎")

p1.walk()
p2.walk()

p1.rest()
p2.rest()


8.3 クラス変数、クラスメソッド

class Player:
    count = 0

    @classmethod
    def players(self):
        print("現在のプレイヤは" + str(Player.count) + "人です")

    def __init__(self, n):
        self.name = n
        Player.count += 1
    
    def walk(self):
        print(self.name + "は歩いている")

    def attack(self, e):
        print(self.name + "は" + e + "を攻撃した")

p1 = Player("太郎")
p2 = Player("次郎")

Player.players()

p1.walk()
p2.walk()

p1.attack("スライム")
p2.attack("スライム")


8.4 変数の保護

class Player:
    count = 0

    @classmethod
    def players(self):
        print("現在のプレイヤは" + str(Player.count) + "人です")

    def __init__(self, n):
        self.__name = n
        Player.count += 1
    
    def walk(self):
        print(self.__name + "は歩いている")

    def rest(self):
        print(self.__name + "は休んでいる")

p1 = Player("太郎")
p2 = Player("次郎")

Player.players()

p1.walk()
p2.walk()

p1.rest()
p2.rest()

# print(p1.__name)
p1.__name = "ジョンソン"
p1.walk()


8.5 プロパティへのアクセス制御(アクセサ)

(アクセサなし)

class Player:
    def __init__(self, n):
        self.__name = n
        self.ability = 3
    
    def walk(self):
        if self.ability > 0:
            print(self.__name + "は歩いている")
            self.ability -= 1
        else:
            print(self.__name + "は疲れて動けない")

    def rest(self):
        print(self.__name + "は休んでいる")
        self.ability += 3

p1 = Player("太郎")

for i in range(5):
    print("残り行動力: " + str(p1.ability))
    p1.walk()

p1.rest()

for i in range(5):
    print("残り行動力: " + str(p1.ability))
    p1.walk()



(アクセサあり)

class Player:
    def __init__(self, n):
        self.__name = n
        self.__ability = 3

    @property
    def ability(self):
        return self.__ability

    @ability.setter
    def ability(self, value):
        print("チート禁止")   

    def walk(self):
        if self.__ability > 0:
            print(self.__name + "は歩いている")
            self.__ability -= 1
        else:
            print(self.__name + "は疲れて動けない")

    def rest(self):
        print(self.__name + "は休んでいる")
        self.__ability += 3

p1 = Player("太郎")

for i in range(5):
    print("残り行動力: " + str(p1.ability))
    p1.walk()

# p1.rest()
p1.ability += 100

for i in range(5):
    print("残り行動力: " + str(p1.ability))
    p1.walk()


8.6 継承

(継承なし)

class Player:
    def __init__(self, n):
        self.name = n

    def walk(self):
       print(self.name + "は歩いている")

p1 = Player("太郎")
p2 = Player("次郎")

p1.walk()
p2.walk()


(継承あり)

class Player:
    def __init__(self, n):
        self.name = n

    def walk(self):
        print(self.name + "は歩いている")

class Fighter(Player):
    def attack(self, e):
        print(self.name + "は" + e + "を攻撃した")

p1 = Player("太郎")
p2 = Fighter("次郎")

p1.walk()
p2.walk()

p2.attack("スライム")


8.7 オーバーライド

class Player:
    def __init__(self, n):
        self.name = n

    def walk(self):
        print(self.name + "は歩いている")

class Hero(Player):
    def attack(self, e):
        print(self.name + "は" + e + "を勇者の剣で攻撃した")

class Fighter(Player):
    def attack(self, e):
        print(self.name + "は" + e + "を二刀流で攻撃した")

class Magician(Player):
    def walk(self):
        print(self.name + "は空を飛んでいる")
        
    def attack(self):
        print(self.name + "は敵全体を炎の魔法で攻撃した")

p1 = Hero("太郎")
p2 = Fighter("次郎")
p3 = Magician("花子")

p1.walk()
p2.walk()
p3.walk()

p1.attack("ドラゴン")
p2.attack("スライム")
p3.attack()


8.8 (問題演習) Enemyクラスのhit()メソッドの定義

(問題)

import random

class Enemy:
    def __init__(self, n):
        self.name = n
        self.hp = 10
    
    def hit(self):
        '''
        ここにメソッドの処理内容を記述
        '''

e1 = Enemy("スライム")
for i in range(0, 5):
    if e1.hp > 0:
        e1.hit()


(回答例)

import random

class Enemy:
    def __init__(self, n):
        self.name = n
        self.hp = 10
    
    def hit(self):
        damage = random.randint(0, 5)
        print(self.name + "に" + str(damage) + "のダメージ")
        self.hp -= damage
        if self.hp <= 0:
            print(self.name + "を倒した")

e1 = Enemy("スライム")
for i in range(0, 5):
    if e1.hp > 0:
        e1.hit()


----------------------------------------------------------------------------------------
9. 標準ライブラリ
----------------------------------------------------------------------------------------

9.1 乱数

import random

array = list(range(0, 10))
print(array)
random.shuffle(array)
print(array)


9.2 時間

import time

print(time.time())
time.sleep(2)
print(time.time())


9.3 数学関数

import math

print(math.sqrt(2))
print(math.factorial(5))
print(math.gcd(122, 305))

print(math.pi)
print(math.e)

print(math.sin(math.pi / 6))


----------------------------------------------------------------------------------------
10. 様々なパッケージ
----------------------------------------------------------------------------------------

10.1 matplotlib

(折れ線グラフ)

import matplotlib.pyplot as plt

x = [0, 1, 2]
y = [0, 1, 4]
y2 = [0, 2, 3]

plt.plot(x, y)
plt.plot(x, y2,color="red",linewidth=2,linestyle="dashed")
plt.title("Test Chart")
plt.xlabel("Horizontal")
plt.ylabel("Vertical")
plt.show()


(円グラフ)

import matplotlib.pyplot as plt
import japanize_matplotlib

labels = ["A型", "B型", "O型", "AB型"]
fracs = [39, 29, 22, 10]

plt.pie(fracs, labels=labels, autopct='%1.1f%%')
plt.show()


10.2 matplotlib + NumPy

(行列計算、統計)

import numpy as np

print(np.zeros((3, 3)))
print(np.ones((3, 3)))
print(np.random.rand(3, 3))

a = np.array([[1,2,3],[4,5,6]])
print(a)
print(a * 3)

ar = np.random.rand(100)
print(np.min(ar))
print(np.mean(ar))
print(np.max(ar))
print(np.std(ar))


(正弦波)

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-10, 10, 1000)
y = np.sin(x)

plt.plot(x, y)
plt.show()


(正規分布、散布図)

import numpy as np
import matplotlib.pyplot as plt

x = np.random.randn(1000)
y = np.random.randn(1000)

plt.scatter(x, y)
plt.grid()
plt.show()


(正規分布、ヒストグラム)

import numpy as np
import matplotlib.pyplot as plt

# x = np.random.randn(1000)
x = np.random.randn(10000)

# plt.hist(x)
plt.hist(x, 100)

plt.grid()
plt.show()


10.3 beautifulsoup

(スクレイピング)

from bs4 import BeautifulSoup
import requests

url = 'https://nodatsu.github.io/py/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# print(soup.prettify())

# print(soup.title.string)

items = soup.find_all("a")
for i in items:
    print(i.string)


10.4 Tkinter

(草を生やす)

import tkinter as tk
import random
 
def www():
    w = tk.Label(text="www")
    w.place(x = random.randrange(400), y = random.randrange(400))  

root = tk.Tk()
root.geometry("400x400")
button = tk.Button(root, text = 'www', command = www)
button.pack()
root.mainloop()


(お絵かき)

import tkinter

def mouse_move_func(event):
    global canvas

    thick = 5
    canvas.create_oval(
        event.x - thick,
        event.y - thick,
        event.x + thick,
        event.y + thick,
        fill = "red",
        width=0
    )

root = tkinter.Tk()
root.geometry("400x400")
canvas = tkinter.Canvas(
    root,
    width = 400,
    height = 400,
    bg = "white"
)
canvas.pack()

root.bind("<Motion>", mouse_move_func)

root.mainloop()

